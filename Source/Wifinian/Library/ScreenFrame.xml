<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ScreenFrame</name>
    </assembly>
    <members>
        <member name="T:ScreenFrame.Helper.CultureInfoAddition">
            <summary>
            Additional methods for <see cref="T:System.Globalization.CultureInfo"/>
            </summary>
        </member>
        <member name="T:ScreenFrame.Helper.DpiScaleExtension">
            <summary>
            Extension methods for <see cref="T:System.Windows.DpiScale"/>
            </summary>
        </member>
        <member name="T:ScreenFrame.Helper.OsVersion">
            <summary>
            OS version information
            </summary>
        </member>
        <member name="P:ScreenFrame.Helper.OsVersion.Is7OrGreater">
            <summary>
            Whether OS is Windows 7 (6.1) or greater
            </summary>
        </member>
        <member name="P:ScreenFrame.Helper.OsVersion.Is8OrGreater">
            <summary>
            Whether OS is Windows 8 (6.2) or greater
            </summary>
        </member>
        <member name="P:ScreenFrame.Helper.OsVersion.Is8Point1OrGreater">
            <summary>
            Whether OS is Windows 8.1 (6.3) or greater
            </summary>
        </member>
        <member name="P:ScreenFrame.Helper.OsVersion.Is10OrGreater">
            <summary>
            Whether OS is Windows 10 (10.0.10240) or greater
            </summary>
        </member>
        <member name="P:ScreenFrame.Helper.OsVersion.Is10Build14393OrGreater">
            <summary>
            Whether OS is Windows 10 (10.0.14393) or greater
            </summary>
        </member>
        <member name="P:ScreenFrame.Helper.OsVersion.Is11OrGreater">
            <summary>
            Whether OS is Windows 11 (10.0.22000) or greater
            </summary>
        </member>
        <member name="T:ScreenFrame.Movers.BasicWindowMover">
            <summary>
            Mover of <see cref="T:System.Windows.Window"/> which implements basic functions
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.BasicWindowMover.#ctor(System.Windows.Window)">
            <summary>
            Constructor
            </summary>
            <param name="window">Window to be moved</param>
        </member>
        <member name="P:ScreenFrame.Movers.BasicWindowMover.PivotAlignment">
            <summary>
            Alignment of pivot
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.BasicWindowMover.HandleWindowPosChanging(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Handles window position changing event.
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.BasicWindowMover.HandleWindowPosChanged(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Handles window position changed event.
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.BasicWindowMover.HandleDisplayChange(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Handles Display change event.
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.BasicWindowMover.GetDpi">
            <summary>
            Gets Per-Monitor DPI of the monitor.
            </summary>
            <returns>DPI information</returns>
        </member>
        <member name="M:ScreenFrame.Movers.BasicWindowMover.TryGetAdjacentLocation(System.Double,System.Double,System.Windows.Rect@)">
            <summary>
            Attempts to get the adjacent location using specified window width and height.
            </summary>
            <param name="windowWidth">Window width</param>
            <param name="windowHeight">Window height</param>
            <param name="location">Location of window</param>
            <returns>True if successfully gets</returns>
        </member>
        <member name="M:ScreenFrame.Movers.BasicWindowMover.TryConfirmLocation(System.Windows.Rect@)">
            <summary>
            Attempts to confirm that a specified location is not completely outside of monitors.
            </summary>
            <param name="location">Location of window</param>
            <returns>True if successfully confirms</returns>
            <remarks>
            The specified location and the current location are not necessarily in the same monitor.
            </remarks>
        </member>
        <member name="T:ScreenFrame.Movers.FloatWindowMover">
            <summary>
            Mover of <see cref="T:System.Windows.Window"/> which implements functions for float window
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.FloatWindowMover.#ctor(System.Windows.Window,System.Windows.Point)">
            <summary>
            Constructor
            </summary>
            <param name="window">Window to be moved</param>
            <param name="pivot">Pivot point to be referred</param>
        </member>
        <member name="P:ScreenFrame.Movers.FloatWindowMover.PivotAlignment">
            <summary>
            Alignment of pivot
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.FloatWindowMover.GetDpi">
            <summary>
            Gets Per-Monitor DPI of the monitor.
            </summary>
            <returns>DPI information</returns>
        </member>
        <member name="M:ScreenFrame.Movers.FloatWindowMover.TryGetAdjacentLocation(System.Double,System.Double,System.Windows.Rect@)">
            <summary>
            Attempts to get the adjacent location using specified window width and height.
            </summary>
            <param name="windowWidth">Window width</param>
            <param name="windowHeight">Window height</param>
            <param name="location">Location of window</param>
            <returns>True if successfully gets</returns>
        </member>
        <member name="M:ScreenFrame.Movers.FloatWindowMover.TryGetAdjacentLocationToPivot(System.Double,System.Double,System.Windows.Rect@)">
            <summary>
            Attempts to get the adjacent location to pivot point using specified window width and height.
            </summary>
            <param name="windowWidth">Window width</param>
            <param name="windowHeight">Window height</param>
            <param name="location">Location of window</param>
            <returns>True if successfully gets</returns>
        </member>
        <member name="T:ScreenFrame.Movers.PopupWindowMover">
            <summary>
            Mover of <see cref="T:System.Windows.Window"/> which implements functions for popup window
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.PopupWindowMover.#ctor(System.Windows.Window,System.Windows.Point)">
            <summary>
            Constructor
            </summary>
            <param name="window">Window to be moved</param>
            <param name="pivot">Pivot point to be referred</param>
        </member>
        <member name="P:ScreenFrame.Movers.PopupWindowMover.PivotAlignment">
            <summary>
            Alignment of pivot
            </summary>
        </member>
        <member name="P:ScreenFrame.Movers.PopupWindowMover.IsCentered">
            <summary>
            Whether to make window centered at pivot
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.PopupWindowMover.GetDpi">
            <summary>
            Gets Per-Monitor DPI of the monitor.
            </summary>
            <returns>DPI information</returns>
        </member>
        <member name="M:ScreenFrame.Movers.PopupWindowMover.TryGetAdjacentLocation(System.Double,System.Double,System.Windows.Rect@)">
            <summary>
            Attempts to get the adjacent location using specified window width and height.
            </summary>
            <param name="windowWidth">Window width</param>
            <param name="windowHeight">Window height</param>
            <param name="location">Location of window</param>
            <returns>True if successfully gets</returns>
        </member>
        <member name="M:ScreenFrame.Movers.PopupWindowMover.TryGetAdjacentLocationToPivot(System.Double,System.Double,System.Windows.Rect@)">
            <summary>
            Attempts to get the adjacent location to pivot point using specified window width and height.
            </summary>
            <param name="windowWidth">Window width</param>
            <param name="windowHeight">Window height</param>
            <param name="location">Location of window</param>
            <returns>True if successfully gets</returns>
        </member>
        <member name="T:ScreenFrame.Movers.StickWindowMover">
            <summary>
            Mover of <see cref="T:System.Windows.Window"/> which implements functions for stick window
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.StickWindowMover.#ctor(System.Windows.Window,System.Windows.Forms.NotifyIcon)">
            <summary>
            Constructor
            </summary>
            <param name="window">Window to be moved</param>
            <param name="notifyIcon">NotifyIcon to be referred</param>
        </member>
        <member name="P:ScreenFrame.Movers.StickWindowMover.PivotAlignment">
            <summary>
            Alignment of pivot
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.StickWindowMover.TryGetAdjacentLocation(System.Double,System.Double,System.Windows.Rect@)">
            <summary>
            Attempts to get the adjacent location using specified window width and height.
            </summary>
            <param name="windowWidth">Window width</param>
            <param name="windowHeight">Window height</param>
            <param name="location">Location of window</param>
            <returns>True if successfully gets</returns>
        </member>
        <member name="F:ScreenFrame.Movers.StickWindowMover.IconPlacement.Unknown">
            <summary>
            The location of NotifyIcon is unknown.
            </summary>
        </member>
        <member name="F:ScreenFrame.Movers.StickWindowMover.IconPlacement.InTaskbar">
            <summary>
            NotifyIcon locates in the taskbar.
            </summary>
        </member>
        <member name="F:ScreenFrame.Movers.StickWindowMover.IconPlacement.InOverflowArea">
            <summary>
            NotifyIcon locates in the notification overflow area.
            </summary>
        </member>
        <member name="P:ScreenFrame.Movers.StickWindowMover.KeepsDistance">
            <summary>
            Whether to keep distance from the taskbar or the notification overflow area
            </summary>
        </member>
        <member name="P:ScreenFrame.Movers.StickWindowMover.Distance">
            <summary>
            Distance from the taskbar or the notification overflow area
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.StickWindowMover.TryGetAdjacentLocationToTaskbar(System.Double,System.Double,System.Windows.Rect@)">
            <summary>
            Attempts to get the adjacent location to NotifyIcon using specified window width and height.
            </summary>
            <param name="windowWidth">Window width</param>
            <param name="windowHeight">Window height</param>
            <param name="location">Location of window</param>
            <returns>True if successfully gets</returns>
        </member>
        <member name="T:ScreenFrame.Movers.SwitchWindowMover">
            <summary>
            Mover of <see cref="T:System.Windows.Window"/> which implements functions for switch window
            </summary>
        </member>
        <member name="P:ScreenFrame.Movers.SwitchWindowMover.IsDeparted">
            <summary>
            Whether the window is departed from taskbar
            </summary>
        </member>
        <member name="E:ScreenFrame.Movers.SwitchWindowMover.IsDepartedChanged">
            <summary>
            Occurs when IsDeparted is changed.
            </summary>
        </member>
        <member name="P:ScreenFrame.Movers.SwitchWindowMover.DepartureInterval">
            <summary>
            Time interval before departure
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.SwitchWindowMover.#ctor(System.Windows.Window,System.Windows.Forms.NotifyIcon)">
            <summary>
            Constructor
            </summary>
            <param name="window">Window to be moved</param>
            <param name="notifyIcon">NotifyIcon to be referred</param>
        </member>
        <member name="P:ScreenFrame.Movers.SwitchWindowMover.PivotAlignment">
            <summary>
            Alignment of pivot
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.SwitchWindowMover.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Handles window messages.
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.SwitchWindowMover.TryGetAdjacentLocation(System.Double,System.Double,System.Windows.Rect@)">
            <summary>
            Attempts to get the adjacent location using specified window width and height.
            </summary>
            <param name="windowWidth">Window width</param>
            <param name="windowHeight">Window height</param>
            <param name="location">Location of window</param>
            <returns>True if successfully gets</returns>
        </member>
        <member name="T:ScreenFrame.Movers.WindowMover">
            <summary>
            Mover of <see cref="T:System.Windows.Window"/>
            </summary>
        </member>
        <member name="F:ScreenFrame.Movers.WindowMover._window">
            <summary>
            Window to be moved
            </summary>
        </member>
        <member name="P:ScreenFrame.Movers.WindowMover.Dpi">
            <summary>
            Per-Monitor DPI of window
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.WindowMover.#ctor(System.Windows.Window)">
            <summary>
            Constructor
            </summary>
            <param name="window">Window to be moved</param>
        </member>
        <member name="M:ScreenFrame.Movers.WindowMover.AdjustWindow(System.Windows.DpiScale)">
            <summary>
            Adjusts DPI of window.
            </summary>
            <param name="dpi">DPI information</param>
        </member>
        <member name="M:ScreenFrame.Movers.WindowMover.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Handles window messages.
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.WindowMover.HandleWindowPosChanging(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Handles window position changing event.
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.WindowMover.HandleWindowPosChanged(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Handles window position changed event.
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.WindowMover.HandleDpiChanged(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Handles DPI changed event.
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.WindowMover.HandleDisplayChange(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Handles display change event.
            </summary>
        </member>
        <member name="E:ScreenFrame.Movers.WindowMover.AppActivated">
            <summary>
            Occurs when the application to which the window belongs is activated.
            </summary>
        </member>
        <member name="E:ScreenFrame.Movers.WindowMover.AppDeactivated">
            <summary>
            Occurs when the application to which the window belongs is deactivated. 
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.WindowMover.HandleActivateApp(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Handles application activated/deactivated event.
            </summary>
        </member>
        <member name="E:ScreenFrame.Movers.WindowMover.EscapeKeyDown">
            <summary>
            Occurs when the escape key is pressed.
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.WindowMover.HandleKeyDown(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Handles key pressed event.
            </summary>
        </member>
        <member name="M:ScreenFrame.Movers.WindowMover.IsForeground">
            <summary>
            Determines whether the window is foreground window.
            </summary>
            <returns>True if foreground</returns>
        </member>
        <member name="T:ScreenFrame.Painter.ThemeInfo">
            <summary>
            Windows themes information
            </summary>
        </member>
        <member name="M:ScreenFrame.Painter.ThemeInfo.GetWindowsTheme">
            <summary>
            Gets the color theme for Windows.
            </summary>
            <returns>Color theme</returns>
        </member>
        <member name="M:ScreenFrame.Painter.ThemeInfo.GetAppTheme">
            <summary>
            Gets the color theme for applications.
            </summary>
            <returns>Color theme</returns>
        </member>
        <member name="T:ScreenFrame.Painter.ColorTheme">
            <summary>
            Color theme
            </summary>
        </member>
        <member name="F:ScreenFrame.Painter.ColorTheme.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:ScreenFrame.Painter.ColorTheme.Dark">
            <summary>
            Dark mode
            </summary>
        </member>
        <member name="F:ScreenFrame.Painter.ColorTheme.Light">
            <summary>
            Light mode
            </summary>
        </member>
        <member name="M:ScreenFrame.Painter.WindowEffect.SetWindowCompositionAttribute(System.IntPtr,ScreenFrame.Painter.WindowEffect.WindowCompositionAttributeData@)">
            <summary>
            Sets window composition attribute (Undocumented API).
            </summary>
            <param name="hwnd">Window handle</param>
            <param name="data">Attribute data</param>
            <returns>True if successfully sets</returns>
            <remarks>
            This API and relevant parameters are derived from:
            https://github.com/riverar/sample-win10-aeroglass 
            </remarks>
        </member>
        <member name="T:ScreenFrame.Painter.CornerPreference">
            <summary>
            Corner preferences of window
            </summary>
        </member>
        <member name="F:ScreenFrame.Painter.CornerPreference.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ScreenFrame.Painter.CornerPreference.NotRound">
            <summary>
            Not round
            </summary>
        </member>
        <member name="F:ScreenFrame.Painter.CornerPreference.Round">
            <summary>
            Round
            </summary>
        </member>
        <member name="T:ScreenFrame.Painter.WindowPainter">
            <summary>
            Painter of <see cref="T:System.Windows.Window"/>
            </summary>
        </member>
        <member name="M:ScreenFrame.Painter.WindowPainter.#ctor(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="args">Arguments</param>
        </member>
        <member name="P:ScreenFrame.Painter.WindowPainter.Options">
            <summary>
            Options
            </summary>
        </member>
        <member name="P:ScreenFrame.Painter.WindowPainter.RespondsThemeChanged">
            <summary>
            Whether to respond when the color theme of Windows is changed
            </summary>
        </member>
        <member name="T:ScreenFrame.Painter.WindowPainter.BackgroundTexture">
            <summary>
            Background texture of window
            </summary>
        </member>
        <member name="F:ScreenFrame.Painter.WindowPainter.BackgroundTexture.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ScreenFrame.Painter.WindowPainter.BackgroundTexture.Thin">
            <summary>
            Thin blur texture
            </summary>
        </member>
        <member name="F:ScreenFrame.Painter.WindowPainter.BackgroundTexture.Thick">
            <summary>
            Thick blur (Acrylic) texture
            </summary>
        </member>
        <member name="M:ScreenFrame.Painter.WindowPainter.CheckArguments(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Checks command-line arguments
            </summary>
            <param name="arguments">Arguments</param>
        </member>
        <member name="M:ScreenFrame.Painter.WindowPainter.Add(System.Windows.Window)">
            <summary>
            Adds a window to be painted.
            </summary>
            <param name="window">Window to be painted</param>
        </member>
        <member name="M:ScreenFrame.Painter.WindowPainter.Remove(System.Windows.Window)">
            <summary>
            Removes a window to be painted.
            </summary>
            <param name="window">Window to be painted</param>
        </member>
        <member name="E:ScreenFrame.Painter.WindowPainter.ThemeChanged">
            <summary>
            Occurs when the color theme for Windows is changed.
            </summary>
        </member>
        <member name="M:ScreenFrame.Painter.WindowPainter.PaintBackground(System.Windows.Window)">
            <summary>
            Paints background of window.
            </summary>
            <param name="window">Window to be painted</param>
        </member>
        <member name="P:ScreenFrame.Painter.WindowPainter.TranslucentBrushKey">
            <summary>
            Background translucent SolidColorBrush key
            </summary>
        </member>
        <member name="M:ScreenFrame.Painter.WindowPainter.ChangeThemes(ScreenFrame.Painter.ColorTheme,ScreenFrame.Painter.ColorTheme)">
            <summary>
            Changes color themes.
            </summary>
            <param name="oldTheme">Old color theme</param>
            <param name="newTheme">New color theme</param>
        </member>
        <member name="M:ScreenFrame.Painter.WindowPainter.ChangeResources(System.String,System.String)">
            <summary>
            Changes resources.
            </summary>
            <param name="oldUriString">Old resources' URI string</param>
            <param name="newUriString">New resources' URI string</param>
        </member>
        <member name="M:ScreenFrame.Painter.WindowPainter.Dispose">
            <summary>
            Public implementation of Dispose pattern
            </summary>
        </member>
        <member name="M:ScreenFrame.Painter.WindowPainter.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern
            </summary>
        </member>
        <member name="T:ScreenFrame.CursorHelper">
            <summary>
            Utility methods for cursor
            </summary>
        </member>
        <member name="M:ScreenFrame.CursorHelper.GetCursorPoint">
            <summary>
            Gets the current point of cursor.
            </summary>
            <returns>The point of cursor</returns>
        </member>
        <member name="T:ScreenFrame.LogicalTreeHelperAddition">
            <summary>
            Additional methods for <see cref="T:System.Windows.LogicalTreeHelper"/>
            </summary>
        </member>
        <member name="M:ScreenFrame.LogicalTreeHelperAddition.EnumerateDescendants``1(System.Windows.DependencyObject)">
            <summary>
            Enumerates descendant objects of a specified object.
            </summary>
            <typeparam name="T">Type of descendant object</typeparam>
            <param name="reference">Ancestor object</param>
            <returns>Enumerable collection of descendant objects</returns>
        </member>
        <member name="T:ScreenFrame.NotifyIconContainer">
            <summary>
            Container of <see cref="T:System.Windows.Forms.NotifyIcon"/>
            </summary>
        </member>
        <member name="T:ScreenFrame.NotifyIconContainer.RefAction`1">
            <summary>
            Encapsulates a method that has a single ref parameter and does not return a value.
            </summary>
            <typeparam name="T">The parameter of the method that this delegate encapsulates</typeparam>
            <param name="obj">The method that this delegate encapsulates</param>
        </member>
        <member name="P:ScreenFrame.NotifyIconContainer.NotifyIcon">
            <summary>
            NotifyIcon instance
            </summary>
        </member>
        <member name="P:ScreenFrame.NotifyIconContainer.NotifyIconHandle">
            <summary>
            NotifyIcon window handle (available only after ShowIcon method is called)
            </summary>
        </member>
        <member name="P:ScreenFrame.NotifyIconContainer.Handlers">
            <summary>
            Windows message handlers
            </summary>
            <remarks>
            Key: ID number for windows message
            Value: Action to be called when the specified windows message is sent to NotifyIcon
            </remarks>
        </member>
        <member name="M:ScreenFrame.NotifyIconContainer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:ScreenFrame.NotifyIconContainer.Text">
            <summary>
            NotifyIcon text
            </summary>
        </member>
        <member name="M:ScreenFrame.NotifyIconContainer.ShowIcon(System.String,System.String)">
            <summary>
            Shows NotifyIcon.
            </summary>
            <param name="iconPath">Path to icon for NotifyIcon</param>
            <param name="iconText">Text for NotifyIcon</param>
        </member>
        <member name="M:ScreenFrame.NotifyIconContainer.ShowIcon(System.Drawing.Icon,System.String)">
            <summary>
            Shows NotifyIcon.
            </summary>
            <param name="icon">Icon for NotifyIcon</param>
            <param name="iconText">Text for NotifyIcon</param>
        </member>
        <member name="M:ScreenFrame.NotifyIconContainer.GetIconRect">
            <summary>
            Gets the rectangle of NotifyIcon.
            </summary>
            <returns>Rectangle of NotifyIcon</returns>
        </member>
        <member name="M:ScreenFrame.NotifyIconContainer.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes windows message sent to NotifyIcon.
            </summary>
            <param name="m">Windows message</param>
        </member>
        <member name="M:ScreenFrame.NotifyIconContainer.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)">
            <summary>
            Called when DPI of the monitor to which NotifyIcon belongs changed.
            </summary>
            <param name="oldDpi">Old DPI information</param>
            <param name="newDpi">New DPI information</param>
        </member>
        <member name="E:ScreenFrame.NotifyIconContainer.MouseLeftButtonClick">
            <summary>
            Occurs when mouse left button is clicked while mouse pointer is over NotifyIcon.
            </summary>
        </member>
        <member name="E:ScreenFrame.NotifyIconContainer.MouseRightButtonClick">
            <summary>
            Occurs when mouse right button is clicked while mouse pointer is over NotifyIcon.
            </summary>
        </member>
        <member name="M:ScreenFrame.NotifyIconContainer.Dispose">
            <summary>
            Public implementation of Dispose pattern
            </summary>
        </member>
        <member name="M:ScreenFrame.NotifyIconContainer.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern
            </summary>
        </member>
        <member name="M:ScreenFrame.NotifyIconHelper.SetNotifyIconWindowForeground(System.Windows.Forms.NotifyIcon)">
            <summary>
            Sets the window of a specified NotifyIcon into foreground.
            </summary>
            <param name="notifyIcon">NotifyIcon</param>
            <returns>True if successfully sets</returns>
        </member>
        <member name="M:ScreenFrame.NotifyIconHelper.TryGetNotifyIconClickedPoint(System.Windows.Forms.NotifyIcon,System.Windows.Point@)">
            <summary>
            Attempts to get the point where a specified NotifyIcon is clicked.
            </summary>
            <param name="notifyIcon">NotifyIcon</param>
            <param name="point">Clicked point</param>
            <returns>True if successfully gets</returns>
            <remarks>MouseEventArgs.Location property of MouseClick event does not contain data.</remarks>
        </member>
        <member name="M:ScreenFrame.NotifyIconHelper.TryGetNotifyIconRect(System.Windows.Forms.NotifyIcon,System.Windows.Rect@)">
            <summary>
            Attempts to get the rectangle of a specified NotifyIcon.
            </summary>
            <param name="notifyIcon">NotifyIcon</param>
            <param name="iconRect">Rectangle of the NotifyIcon</param>
            <returns>True if successfully gets</returns>
            <remarks>
            The idea to get the rectangle of a NotifyIcon is derived from:
            https://github.com/rzhw/SuperNotifyIcon
            </remarks>
        </member>
        <member name="T:ScreenFrame.PivotAlignment">
            <summary>
            Alignment of pivot (clockwise)
            </summary>
        </member>
        <member name="F:ScreenFrame.PivotAlignment.None">
            <summary>
            None (valid value)
            </summary>
        </member>
        <member name="F:ScreenFrame.PivotAlignment.TopLeft">
            <summary>
            Top-Left
            </summary>
        </member>
        <member name="F:ScreenFrame.PivotAlignment.TopRight">
            <summary>
            Top-Right
            </summary>
        </member>
        <member name="F:ScreenFrame.PivotAlignment.BottomRight">
            <summary>
            Bottom-Right
            </summary>
        </member>
        <member name="F:ScreenFrame.PivotAlignment.BottomLeft">
            <summary>
            Bottom-Left
            </summary>
        </member>
        <member name="T:ScreenFrame.VisualTreeHelperAddition">
            <summary>
            Additional methods for <see cref="T:System.Windows.Media.VisualTreeHelper"/>
            </summary>
        </member>
        <member name="F:ScreenFrame.VisualTreeHelperAddition.MONITOR_DEFAULTTO.MONITOR_DEFAULTTONULL">
            <summary>
            If no display monitor intersects, returns null.
            </summary>
        </member>
        <member name="F:ScreenFrame.VisualTreeHelperAddition.MONITOR_DEFAULTTO.MONITOR_DEFAULTTOPRIMARY">
            <summary>
            If no display monitor intersects, returns a handle to the primary display monitor.
            </summary>
        </member>
        <member name="F:ScreenFrame.VisualTreeHelperAddition.MONITOR_DEFAULTTO.MONITOR_DEFAULTTONEAREST">
            <summary>
            If no display monitor intersects, returns a handle to the display monitor that is nearest to the rectangle.
            </summary>
        </member>
        <member name="F:ScreenFrame.VisualTreeHelperAddition.MONITOR_DPI_TYPE.MDT_Effective_DPI">
            <summary>
            Effective DPI that incorporates accessibility overrides and matches what Desktop Window Manage (DWM) uses to scale desktop applications
            </summary>
        </member>
        <member name="F:ScreenFrame.VisualTreeHelperAddition.MONITOR_DPI_TYPE.MDT_Angular_DPI">
            <summary>
            DPI that ensures rendering at a compliant angular resolution on the screen, without incorporating accessibility overrides
            </summary>
        </member>
        <member name="F:ScreenFrame.VisualTreeHelperAddition.MONITOR_DPI_TYPE.MDT_Raw_DPI">
            <summary>
            Linear DPI of the screen as measured on the screen itself
            </summary>
        </member>
        <member name="F:ScreenFrame.VisualTreeHelperAddition.MONITOR_DPI_TYPE.MDT_Default">
            <summary>
            Default DPI
            </summary>
        </member>
        <member name="P:ScreenFrame.VisualTreeHelperAddition.SystemDpi">
            <summary>
            System DPI
            </summary>
        </member>
        <member name="M:ScreenFrame.VisualTreeHelperAddition.GetDpi(System.Windows.Point)">
            <summary>
            Gets Per-Monitor DPI of the monitor to which a specified point belongs.
            </summary>
            <param name="point">Point</param>
            <returns>DPI information</returns>
        </member>
        <member name="M:ScreenFrame.VisualTreeHelperAddition.GetDpi(System.Windows.Media.Visual)">
            <summary>
            Gets Per-Monitor DPI of the monitor to which a specified Visual belongs.
            </summary>
            <param name="visual">Visual</param>
            <returns>DPI information</returns>
        </member>
        <member name="M:ScreenFrame.VisualTreeHelperAddition.GetNotificationAreaDpi">
            <summary>
            Gets Per-Monitor DPI of the monitor to which the notification area belongs.
            </summary>
            <returns>DPI information</returns>
        </member>
        <member name="M:ScreenFrame.VisualTreeHelperAddition.ConvertToDpiScale(System.IntPtr)">
            <summary>
            Converts WM_DPICHANGED message's wParam value to DpiScale.
            </summary>
            <param name="wParam">wParam value</param>
            <returns>DPI information</returns>
        </member>
        <member name="M:ScreenFrame.VisualTreeHelperAddition.ConvertToRect(System.IntPtr)">
            <summary>
            Converts WM_DPICHANGED message's lParam value to Rect.
            </summary>
            <param name="lParam">lParam value</param>
            <returns>Rectangle</returns>
        </member>
        <member name="M:ScreenFrame.VisualTreeHelperAddition.TryGetAncestor``1(System.Windows.DependencyObject,``0@)">
            <summary>
            Attempts to get the first ancestor visual of a specified visual.
            </summary>
            <typeparam name="T">Type of ancestor visual</typeparam>
            <param name="reference">Descendant visual</param>
            <param name="ancestor">Ancestor visual</param>
            <returns>True if successfully gets</returns>
        </member>
        <member name="M:ScreenFrame.VisualTreeHelperAddition.TryGetDescendant``1(System.Windows.DependencyObject,``0@)">
            <summary>
            Attempts to get the first descendant visual of a specified visual.
            </summary>
            <typeparam name="T">Type of descendant visual</typeparam>
            <param name="reference">Ancestor visual</param>
            <param name="descendant">Descendant visual</param>
            <returns>True if successfully gets</returns>
        </member>
        <member name="T:ScreenFrame.WindowHelper">
            <summary>
            Utility methods for <see cref="T:System.Windows.Window"/>
            </summary>
        </member>
        <member name="F:ScreenFrame.WindowHelper.MONITOR_DEFAULTTO.MONITOR_DEFAULTTONULL">
            <summary>
            If no display monitor intersects, returns null.
            </summary>
        </member>
        <member name="F:ScreenFrame.WindowHelper.MONITOR_DEFAULTTO.MONITOR_DEFAULTTOPRIMARY">
            <summary>
            If no display monitor intersects, returns a handle to the primary display monitor.
            </summary>
        </member>
        <member name="F:ScreenFrame.WindowHelper.MONITOR_DEFAULTTO.MONITOR_DEFAULTTONEAREST">
            <summary>
            If no display monitor intersects, returns a handle to the display monitor that is nearest to the rectangle.
            </summary>
        </member>
        <member name="M:ScreenFrame.WindowHelper.TryGetMonitorRect(System.Windows.Point,System.Windows.Rect@,System.Windows.Rect@)">
            <summary>
            Attempts to get monitor rectangle which includes a specified point.
            </summary>
            <param name="point">Point to be checked</param>
            <param name="monitorRect">Monitor rectangle</param>
            <param name="workRect">Working area rectangle</param>
            <returns>True if successfully gets</returns>
        </member>
        <member name="M:ScreenFrame.WindowHelper.TryGetMonitorRect(System.Windows.Rect,System.Windows.Rect@,System.Windows.Rect@)">
            <summary>
            Attempts to get monitor rectangle which includes a specified rectangle.
            </summary>
            <param name="rect">Rectangle to be checked</param>
            <param name="monitorRect">Monitor rectangle</param>
            <param name="workRect">Working area rectangle</param>
            <returns>True if successfully gets</returns>
        </member>
        <member name="M:ScreenFrame.WindowHelper.IsForegroundWindow(System.Windows.Window)">
            <summary>
            Determines if a specified window is foreground.
            </summary>
            <param name="window">Window to be determined</param>
            <returns>True if foreground</returns>
        </member>
        <member name="M:ScreenFrame.WindowHelper.EnsureForegroundWindow(System.Windows.Window)">
            <summary>
            Ensures a specified window is foreground.
            </summary>
            <param name="window">Window to be ensured</param>
            <returns>True if foreground</returns>
        </member>
        <member name="M:ScreenFrame.WindowHelper.TryGetTaskbar(System.Windows.Rect@,ScreenFrame.TaskbarAlignment@,System.Boolean@)">
            <summary>
            Attempts to get the information on primary taskbar.
            </summary>
            <param name="taskbarRect">Primary taskbar rectange</param>
            <param name="taskbarAlignment">Primary taskbar alignment</param>
            <param name="isShown">Whether primary taskbar is shown or hidden</param>
            <returns>True if successfully gets</returns>
        </member>
        <member name="M:ScreenFrame.WindowHelper.TryGetPrimaryTaskbar(System.Windows.Rect@,ScreenFrame.TaskbarAlignment@)">
            <summary>
            Attempts to get the information on primary taskbar.
            </summary>
            <param name="taskbarRect">Primary taskbar rectangle</param>
            <param name="taskbarAlignment">Primary taskbar alignment</param>
            <returns>True if successfully gets</returns>
            <remarks>If primary taskbar is hidden, this method will fail.</remarks>
        </member>
        <member name="M:ScreenFrame.WindowHelper.TryGetSecondaryTaskbar(System.Windows.Rect,System.Windows.Rect@,ScreenFrame.TaskbarAlignment@)">
            <summary>
            Attempts to get the information on secondary taskbar inside a specified monitor rectangle.
            </summary>
            <param name="monitorRect">Monitor rectangle</param>
            <param name="taskbarRect">Secondary taskbar rectangle</param>
            <param name="taskbarAlignment">Secondary taskbar alignment</param>
            <returns>True if successfully gets</returns>
            <remarks>If secondary taskbar is hidden, this method will fail.</remarks>
        </member>
    </members>
</doc>
