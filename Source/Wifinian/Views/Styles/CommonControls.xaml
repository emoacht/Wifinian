<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

	<!-- Button -->
	<Style x:Key="NormalButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="{StaticResource Button.Foreground}"/>
		<Setter Property="BorderThickness" Value="2"/>
		<Setter Property="Foreground" Value="{StaticResource Button.Foreground}"/>
		<Setter Property="FontSize" Value="13"/>
		<Setter Property="FontWeight" Value="SemiBold"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Border x:Name="border"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								SnapsToDevicePixels="True" UseLayoutRounding="True">
							<ContentPresenter x:Name="contentPresenter"
											  Margin="{TemplateBinding Padding}"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											  Content="{TemplateBinding Content}"/>
						</Border>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="border"
														 Storyboard.TargetProperty="(Control.BorderBrush).(SolidColorBrush.Opacity)"
														 To="1.0"
														 Duration="0:0:0.1"/>
										<DoubleAnimation Storyboard.TargetName="border"
														 Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Opacity)"
														 To="1.0"
														 Duration="0:0:0.1"/>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="border"
														 Storyboard.TargetProperty="(Control.BorderBrush).(SolidColorBrush.Opacity)"
														 To="1.0"
														 Duration="0:0:0.1"/>
										<DoubleAnimation Storyboard.TargetName="border"
														 Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Opacity)"
														 To="1.0"
														 Duration="0:0:0.1"/>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="border"
														 Storyboard.TargetProperty="(Control.BorderBrush).(SolidColorBrush.Opacity)"
														 To="0.4"
														 Duration="0:0:0"/>
										<DoubleAnimation Storyboard.TargetName="border"
														 Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Opacity)"
														 To="0.4"
														 Duration="0:0:0"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="MenuButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="Background" Value="{StaticResource ToggleButton.Background.Normal}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Foreground" Value="{StaticResource ToggleButton.Foreground.Normal}"/>
		<Setter Property="FontSize" Value="12"/>
		<Setter Property="FontWeight" Value="SemiBold"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Border x:Name="border"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								SnapsToDevicePixels="True" UseLayoutRounding="True">
							<ContentPresenter x:Name="contentPresenter"
											  Margin="{TemplateBinding Padding}"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											  Content="{TemplateBinding Content}"/>
						</Border>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="border"
														 Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Opacity)"
														 To="0.8"
														 Duration="0:0:0.1"/>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="border"
														 Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Opacity)"
														 To="1.0"
														 Duration="0:0:0.1"/>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<ColorAnimation Storyboard.TargetName="border"
														Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)"
														To="{StaticResource ToggleButton.Background.CheckedColor}"
														Duration="0:0:0.1"/>
										<DoubleAnimation Storyboard.TargetName="border"
														 Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Opacity)"
														 To="1.0"
														 Duration="0:0:0.1"/>
										<DoubleAnimation Storyboard.TargetName="border"
														 Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Opacity)"
														 To="0.8"
														 Duration="0:0:0.1"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ActionButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="{StaticResource Button.Foreground}"/>
		<Setter Property="BorderThickness" Value="2"/>
		<Setter Property="Foreground" Value="{StaticResource Button.Foreground}"/>
		<Setter Property="FontSize" Value="12"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Border x:Name="border"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								SnapsToDevicePixels="True" UseLayoutRounding="True">
							<ContentPresenter x:Name="contentPresenter"
											  Margin="{TemplateBinding Padding}"
											  Content="{TemplateBinding Content}"/>
						</Border>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="border"
														 Storyboard.TargetProperty="(Control.BorderBrush).(SolidColorBrush.Opacity)"
														 To="1.0"
														 Duration="0:0:0.1"/>
										<DoubleAnimation Storyboard.TargetName="border"
														 Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Opacity)"
														 To="1.0"
														 Duration="0:0:0.1"/>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="border"
														 Storyboard.TargetProperty="(Control.BorderBrush).(SolidColorBrush.Opacity)"
														 To="1.0"
														 Duration="0:0:0.1"/>
										<DoubleAnimation Storyboard.TargetName="border"
														 Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Opacity)"
														 To="1.0"
														 Duration="0:0:0.1"/>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="border"
														 Storyboard.TargetProperty="(Control.BorderBrush).(SolidColorBrush.Opacity)"
														 To="0.4"
														 Duration="0:0:0"/>
										<DoubleAnimation Storyboard.TargetName="border"
														 Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Opacity)"
														 To="0.4"
														 Duration="0:0:0"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- TextBox -->
	<Style x:Key="NameTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
		<Setter Property="CaretBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Foreground}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Border x:Name="border"
							BorderBrush="Transparent" BorderThickness="1"
							Background="Transparent"
							SnapsToDevicePixels="True">
						<ScrollViewer x:Name="PART_ContentHost"
									  VerticalScrollBarVisibility="Hidden"
									  Focusable="False"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsReadOnly" Value="False">
							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Text.Border.Writable}"/>
							<Setter Property="Background" TargetName="border" Value="{StaticResource Text.Background.Writable}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- CheckBox -->
	<Style x:Key="ItemCheckBoxStyle" TargetType="{x:Type CheckBox}">
		<Setter Property="Foreground" Value="{StaticResource Button.Foreground}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<Grid Background="Transparent"
							  Margin="{TemplateBinding Padding}"
							  SnapsToDevicePixels="True" UseLayoutRounding="True">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
						</Grid.RowDefinitions>

						<Border Grid.Row="1"
								x:Name="checkMark"
								BorderBrush="{TemplateBinding Foreground}" BorderThickness="0,0,0,2"
								Opacity="0"/>

						<ContentPresenter Grid.Column="1" Grid.Row="0"
										  x:Name="content"
										  Margin="4,2" HorizontalAlignment="Left" VerticalAlignment="Center"
										  Focusable="False"
										  Opacity="0.6"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Opacity" TargetName="content" Value="1"/>
							<Setter Property="Opacity" TargetName="checkMark" Value="1"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter Property="Opacity" TargetName="content" Value="0.6"/>
							<Setter Property="Opacity" TargetName="checkMark" Value="0"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ScrollBar -->
	<SolidColorBrush x:Key="ScrollBar.Thumb.Static" Color="{StaticResource ScrollBar.Thumb.NormalColor}"/>
	<SolidColorBrush x:Key="ScrollBar.Thumb.MouseOver" Color="{StaticResource ScrollBar.Thumb.MouseOverColor}"/>
	<SolidColorBrush x:Key="ScrollBar.Thumb.Pressed" Color="{StaticResource ScrollBar.Thumb.MouseOverColor}"/>

	<Style x:Key="ScrollBarTrackButton" TargetType="{x:Type RepeatButton}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Rectangle Width="{TemplateBinding Width}"
							   Height="{TemplateBinding Height}"
							   Fill="Transparent"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ScrollBarTrackThumb" TargetType="{x:Type Thumb}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Rectangle x:Name="rectangle"
							   Width="{TemplateBinding Width}"
							   Height="{TemplateBinding Height}"
							   Fill="{StaticResource ScrollBar.Thumb.Static}"
							   SnapsToDevicePixels="True" UseLayoutRounding="True"/>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="rectangle" Property="Fill" Value="{StaticResource ScrollBar.Thumb.MouseOver}"/>
						</Trigger>
						<Trigger Property="IsDragging" Value="True">
							<Setter TargetName="rectangle" Property="Fill" Value="{StaticResource ScrollBar.Thumb.Pressed}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type ScrollBar}">
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="False"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
		<Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollBar}">
					<Grid SnapsToDevicePixels="True">
						<Track x:Name="PART_Track"
							   IsDirectionReversed="True"
							   IsEnabled="{TemplateBinding IsMouseOver}">
							<Track.DecreaseRepeatButton>
								<RepeatButton Style="{StaticResource ScrollBarTrackButton}"
											  Command="{x:Static ScrollBar.PageUpCommand}"/>
							</Track.DecreaseRepeatButton>
							<Track.IncreaseRepeatButton>
								<RepeatButton Style="{StaticResource ScrollBarTrackButton}"
											  Command="{x:Static ScrollBar.PageDownCommand}"/>
							</Track.IncreaseRepeatButton>
							<Track.Thumb>
								<Thumb Style="{StaticResource ScrollBarTrackThumb}"/>
							</Track.Thumb>
						</Track>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="Width" Value="Auto"/>
				<Setter Property="MinWidth" Value="0"/>
				<Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
				<Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollBar}">
							<Grid SnapsToDevicePixels="True">
								<Track x:Name="PART_Track"
									   IsEnabled="{TemplateBinding IsMouseOver}">
									<Track.DecreaseRepeatButton>
										<RepeatButton Style="{StaticResource ScrollBarTrackButton}"
													  Command="{x:Static ScrollBar.PageLeftCommand}"/>
									</Track.DecreaseRepeatButton>
									<Track.IncreaseRepeatButton>
										<RepeatButton Style="{StaticResource ScrollBarTrackButton}"
													  Command="{x:Static ScrollBar.PageRightCommand}"/>
									</Track.IncreaseRepeatButton>
									<Track.Thumb>
										<Thumb Style="{StaticResource ScrollBarTrackThumb}"/>
									</Track.Thumb>
								</Track>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- Menu separator -->
	<Style x:Key="MenuSeparatorStyle" TargetType="{x:Type Separator}">
		<Setter Property="Margin" Value="8,4"/>
		<Setter Property="Background" Value="{StaticResource Menu.Separator}"/>
	</Style>

	<!-- Menu item -->
	<Style x:Key="MenuItemStyle" TargetType="{x:Type ContentControl}">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContentControl}">
					<Grid x:Name="body"
						  Background="{StaticResource Menu.Item.Background.Normal}"
						  SnapsToDevicePixels="True" UseLayoutRounding="True">
						<ContentPresenter x:Name="presenter"
										  Margin="{TemplateBinding Padding}"
										  Content="{TemplateBinding Content}"
										  ContentTemplate="{TemplateBinding ContentTemplate}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" TargetName="body" Value="{StaticResource Menu.Item.Background.MouseOver}"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="True">
							<Setter Property="Background" TargetName="body" Value="{StaticResource Menu.Item.Background.MouseOver}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Check Button -->
	<Style x:Key="CheckButtonItemStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Foreground" Value="{StaticResource App.Foreground}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid Margin="{TemplateBinding Padding}"
						  Background="{TemplateBinding Background}"
						  SnapsToDevicePixels="True" UseLayoutRounding="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid Grid.Column="0"
							  Width="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}">
							<Polyline x:Name="checkMark"
									  Margin="3"
									  Points="0,5 4,9 12,0" Stretch="Uniform"
									  Stroke="{TemplateBinding Foreground}" StrokeThickness="1"
									  Opacity="0"/>
						</Grid>
						<ContentPresenter Grid.Column="1"
										  Margin="3" HorizontalAlignment="Left" VerticalAlignment="Center"
										  Focusable="False"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Opacity" TargetName="checkMark" Value="1"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter Property="Opacity" TargetName="checkMark" Value="0"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Close Button -->
	<Style x:Key="CloseButtonItemStyle" TargetType="{x:Type ContentControl}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Foreground" Value="{StaticResource App.Foreground}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContentControl}">
					<Grid Margin="{TemplateBinding Padding}"
						  Background="{TemplateBinding Background}"
						  SnapsToDevicePixels="True" UseLayoutRounding="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid Grid.Column="0"
							  Width="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}">
							<Path Margin="3"
								  Stretch="Uniform"
								  Stroke="{TemplateBinding Foreground}" StrokeThickness="1">
								<Path.Data>
									<GeometryGroup>
										<LineGeometry StartPoint="0,0" EndPoint="1,1"/>
										<LineGeometry StartPoint="0,1" EndPoint="1,0"/>
									</GeometryGroup>
								</Path.Data>
							</Path>
						</Grid>
						<ContentPresenter Grid.Column="1"
										  Margin="3" HorizontalAlignment="Left" VerticalAlignment="Center"
										  Focusable="False"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>